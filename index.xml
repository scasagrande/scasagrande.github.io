<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Steven Casagrande</title>
    <link>https://steven.casagrande.io/</link>
    <description>Recent content on Steven Casagrande</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://steven.casagrande.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prefer ZST compression over XZ for use with Bazel</title>
      <link>https://steven.casagrande.io/posts/2024/prefer-zst-over-xz/</link>
      <pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://steven.casagrande.io/posts/2024/prefer-zst-over-xz/</guid>
      <description>&lt;p&gt;Earlier this year, I was profiling our Bazel builds looking for any easy wins to speed up CI. One bottleneck I found was the decompression of fetched archives that were compressed with xz.&lt;/p&gt;&#xA;&lt;p&gt;Before starting this work I already knew that decompressing our &lt;a href=&#34;https://steven.casagrande.io/posts/2024/building-macos-llvm-package/&#34; &gt;pre-built llvm toolchain&lt;/a&gt; and &lt;a href=&#34;https://steven.casagrande.io/posts/2024/sysroot-generation-toolchains-llvm/&#34; &gt;sysroot package&lt;/a&gt; took a non-trivial amount of time. But with the full profiling data in hand I was able to see exactly how much time we were spending in CI on fetch vs decompression, how many tasks were waiting, and if there were any other decompression tasks taking a non-trivial amount of time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building macOS llvm for toolchains_llvm</title>
      <link>https://steven.casagrande.io/posts/2024/building-macos-llvm-package/</link>
      <pubDate>Sun, 22 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://steven.casagrande.io/posts/2024/building-macos-llvm-package/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/bazel-contrib/toolchains_llvm&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;toolchains_llvm&lt;/a&gt; is a great &lt;a href=&#34;https://bazel.build/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bazel&lt;/a&gt; ruleset for providing a hermetic llvm C / C++ (CC) toolchain.&lt;/p&gt;&#xA;&lt;p&gt;By default, this ruleset will download &lt;a href=&#34;https://github.com/llvm/llvm-project/releases&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;official llvm release packages&lt;/a&gt;. This is a good starting point, but you may want to build your own. Some reasons include:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Not wanting to rely on GitHub hosted artifacts&lt;/li&gt;&#xA;&lt;li&gt;Wanting to take ownership over your CC toolchain&lt;/li&gt;&#xA;&lt;li&gt;Downloading and extracting these large official releases is significantly impacting your CI startup time&lt;/li&gt;&#xA;&lt;li&gt;You want to use a version that doesn&amp;rsquo;t have official releases for your platforms&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;By the end of this article you will be able to build your own macOS llvm package with libc++ for use with toolchains_llvm. In addition to native macOS builds, this toolchain will be able to cross-compile for both Linux-x86_64 and Linux-aarch64 &lt;a href=&#34;https://steven.casagrande.io/posts/2024/sysroot-generation-toolchains-llvm/&#34; &gt;with an appropriate Linux sysroot package&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sysroot package generation for use with toolchains_llvm</title>
      <link>https://steven.casagrande.io/posts/2024/sysroot-generation-toolchains-llvm/</link>
      <pubDate>Sat, 23 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://steven.casagrande.io/posts/2024/sysroot-generation-toolchains-llvm/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://bazel.build/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bazel&lt;/a&gt; aims to provide a hermetic environment for your build &amp;amp; test operations (&amp;ldquo;actions&amp;rdquo;) to run in. However by default Bazel does not provide a hermetic C / C++ (CC) toolchain. If you would like to learn more about this and why it is important, then I suggest you read &lt;a href=&#34;https://blog.aspect.dev/hermetic-c-toolchain&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this article by Thulio Ferraz Assis at Aspect&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Alongside their article, &lt;a href=&#34;https://github.com/f0rmiga/gcc-toolchain&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;they developed a solution&lt;/a&gt; to enable a hermetic GCC compiler and associated Linux sysroot package. Their solution is great if you want to use GCC. But if you instead want to use a hermetic &lt;code&gt;llvm-clang&lt;/code&gt; compiler toolchain, then we are going to have to make some modifications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>My Personal Security Plan</title>
      <link>https://steven.casagrande.io/posts/2017/my-personal-security-plan/</link>
      <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://steven.casagrande.io/posts/2017/my-personal-security-plan/</guid>
      <description>&lt;p&gt;Back on June 5, 2013, I remember pacing back and forth while freaking out all day. I spent the day talking to my good friend &lt;a href=&#34;http://www.cgranade.com/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cassandra Granade&lt;/a&gt;, who was in a similar state of dismay. At the time we were both in graduate school, him doing his PhD and myself working on my M.Sc., both in physics. We poured over all the news of the day, astonished at what we were reading. It honestly felt like some sort of nightmare, where all the bad plots to Hollywood movies were coming real.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Python, Requests, and SSL</title>
      <link>https://steven.casagrande.io/posts/2016/python-requests-and-ssl/</link>
      <pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate>
      <guid>https://steven.casagrande.io/posts/2016/python-requests-and-ssl/</guid>
      <description>&lt;div class=&#34;notice warning&#34;&gt;&#xA;  &lt;div class=&#34;notice-title&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-exclamation-triangle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Warning&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;notice-content&#34;&gt;&lt;p&gt;This post was written in 2016 when &lt;code&gt;asyncio&lt;/code&gt; was the highlight feature in the recently released Python 3.5.&lt;/p&gt;&#xA;&lt;p&gt;There are probably much better ways to handle this now. Proceed with caution!&lt;/p&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;h2 id=&#34;ssl-and-synchronous-requests&#34;&gt;&#xA;  SSL and Synchronous Requests&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#ssl-and-synchronous-requests&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;(scroll down for async requests)&lt;/p&gt;&#xA;&lt;p&gt;In Python, the main way in which one makes a web request is via the &lt;code&gt;requests&lt;/code&gt; library, like so:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Travis CI and If Statements</title>
      <link>https://steven.casagrande.io/posts/2016/travis-ci-and-if-statements/</link>
      <pubDate>Thu, 28 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://steven.casagrande.io/posts/2016/travis-ci-and-if-statements/</guid>
      <description>&lt;p&gt;So the other day at work (seems to be a trend in my posts) I was investigating a problem that we noticed with one of our project&amp;rsquo;s TravisCI builds. Specifically, we found that a step under &lt;code&gt;script&lt;/code&gt; had failed, but the overall build still passed! Very curious problem indeed, and of course needs to be immediately fixed.&lt;/p&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s take a look at a similar offending code block:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;if [ ${TRAVIS_SECURE_ENV_VARS} = &amp;#34;true&amp;#34; ]; then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          docker run project-container &amp;#34;npm run test&amp;#34;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          docker run project-container &amp;#34;npm run test:lint&amp;#34;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          docker-compose run ui-tests;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      else&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          npm run test;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          npm run test:lint;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      fi&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before we continue, I&amp;rsquo;d like to point out that I did not write this &lt;code&gt;if&lt;/code&gt; block. In fact, here is what I had just weeks before:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remember to Pull Your Base Docker Images Before Building</title>
      <link>https://steven.casagrande.io/posts/2016/remember-to-pull-your-base-docker-images-before-building/</link>
      <pubDate>Fri, 22 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://steven.casagrande.io/posts/2016/remember-to-pull-your-base-docker-images-before-building/</guid>
      <description>&lt;div class=&#34;notice warning&#34;&gt;&#xA;  &lt;div class=&#34;notice-title&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-exclamation-triangle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Warning&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;notice-content&#34;&gt;&lt;p&gt;This post was written in 2016 and the ecosystem has matured much since then.&lt;/p&gt;&#xA;&lt;p&gt;Proceed with caution!&lt;/p&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;At work I was recently debugging some docker containers that were being built nightly by Jenkins. These were actually the same images that I was building &lt;a href=&#34;https://steven.casagrande.io/posts/2016/automatically-building-docker-containers-with-different-base-image-tags/&#34; &gt;in my last article&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;After making the changes that I mentioned in that article, I noticed that the resulting containers for &lt;code&gt;argon&lt;/code&gt; were having no issues, but builds of our app using &lt;code&gt;latest&lt;/code&gt; were having issues finding a package. So I built our app container locally and I dived in to see what was wrong.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Automatically Building Docker Containers With Different Base Image Tags</title>
      <link>https://steven.casagrande.io/posts/2016/automatically-building-docker-containers-with-different-base-image-tags/</link>
      <pubDate>Wed, 20 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://steven.casagrande.io/posts/2016/automatically-building-docker-containers-with-different-base-image-tags/</guid>
      <description>&lt;div class=&#34;notice warning&#34;&gt;&#xA;  &lt;div class=&#34;notice-title&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-exclamation-triangle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Warning&#xA;  &lt;/div&gt;&#xA;  &lt;div class=&#34;notice-content&#34;&gt;&lt;p&gt;This post was written in 2016 and the ecosystem has matured much since then.&lt;/p&gt;&#xA;&lt;p&gt;Proceed with caution!&lt;/p&gt;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&#xA;&lt;p&gt;At work I recently added a Dockerfile to one of our accessory tools, and set it up with Jenkins to build on a nightly basis. This build occurs nightly as opposed to on new master commits to ensure that the resulting container always has the latest versions of all its dependencies (including node).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Code Coverage Isn&#39;t Everything</title>
      <link>https://steven.casagrande.io/posts/2016/code-coverage-isnt-everything/</link>
      <pubDate>Sat, 16 Apr 2016 00:00:00 +0000</pubDate>
      <guid>https://steven.casagrande.io/posts/2016/code-coverage-isnt-everything/</guid>
      <description>&lt;p&gt;Over the past few months, the people within my circle of friends (myself included) have started to put more of an emphasis on increasing the code coverage for their own projects. I&amp;rsquo;d like to take a moment here how a code coverage metric is important, but it should not be the only goal when writing unit tests.&lt;/p&gt;&#xA;&lt;p&gt;For those that are unaware, code coverage is simply a metric that measures the percentage of lines of code that are executed when your unit test framework is run. You can see an example coverage report at the &lt;a href=&#34;https://app.codecov.io/gh/instrumentkit/InstrumentKit&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Codecov page for InstrumentKit&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Compiling Arduino Caterina with New VID/PID</title>
      <link>https://steven.casagrande.io/posts/2014/compiling-arduino-caterina-with-new-vidpid/</link>
      <pubDate>Wed, 19 Feb 2014 00:00:00 +0000</pubDate>
      <guid>https://steven.casagrande.io/posts/2014/compiling-arduino-caterina-with-new-vidpid/</guid>
      <description>How to compile a custom Arduino Caterina bootloader</description>
    </item>
    <item>
      <title>about me</title>
      <link>https://steven.casagrande.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://steven.casagrande.io/about/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h1 id=&#34;skill-summary&#34;&gt;&#xA;  Skill Summary&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#skill-summary&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Technologies&lt;/strong&gt;: Bazel, Python, Docker, Continuous Integration&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Skills&lt;/strong&gt;: Building, testing, debugging, contradiction analysis&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;experience&#34;&gt;&#xA;  Experience&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#experience&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;lead-build-systems-developer---ibm-quantumhttpswwwibmcomquantum&#34;&gt;&#xA;  Lead Build Systems Developer - &lt;a href=&#34;https://www.ibm.com/quantum&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IBM Quantum&lt;/a&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#lead-build-systems-developer---ibm-quantumhttpswwwibmcomquantum&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Nov 2023 - Current&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Moved to a new role as lead build systems developer to focus full-time on the build infrastructure.&lt;/li&gt;&#xA;&lt;li&gt;Continued to improve and maintain the bazel build system. This solid foundation allowed several teams to rapidly and confidently test, integrate, and deploy our generation-3 runtime code, culminating in our impressive &lt;a href=&#34;https://www.ibm.com/quantum/blog/qdc-2024&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CLOPs performance improvement announcement as part of QDC 2024&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;Ran feedback sessions with developers to better understand their pain points. Then using contradiction analysis I provided detailed plans on what the path forward would be.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;senior-test-developer---ibm-quantumhttpswwwibmcomquantum&#34;&gt;&#xA;  Senior Test Developer - &lt;a href=&#34;https://www.ibm.com/quantum&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IBM Quantum&lt;/a&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#senior-test-developer---ibm-quantumhttpswwwibmcomquantum&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Nov 2020 - Oct 2023&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

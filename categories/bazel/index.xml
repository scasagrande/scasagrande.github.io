<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bazel on Steven Casagrande</title>
    <link>https://steven.casagrande.io/categories/bazel/</link>
    <description>Recent content in Bazel on Steven Casagrande</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Dec 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://steven.casagrande.io/categories/bazel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Prefer ZST compression over XZ for use with Bazel</title>
      <link>https://steven.casagrande.io/posts/2024/prefer-zst-over-xz/</link>
      <pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate>
      <guid>https://steven.casagrande.io/posts/2024/prefer-zst-over-xz/</guid>
      <description>&lt;p&gt;Earlier this year, I was profiling our Bazel builds looking for any easy wins to speed up CI. One bottleneck I found was the decompression of fetched archives that were compressed with xz.&lt;/p&gt;&#xA;&lt;p&gt;Before starting this work I already knew that decompressing our &lt;a href=&#34;https://steven.casagrande.io/posts/2024/building-macos-llvm-package/&#34; &gt;pre-built llvm toolchain&lt;/a&gt; and &lt;a href=&#34;https://steven.casagrande.io/posts/2024/sysroot-generation-toolchains-llvm/&#34; &gt;sysroot package&lt;/a&gt; took a non-trivial amount of time. But with the full profiling data in hand I was able to see exactly how much time we were spending in CI on fetch vs decompression, how many tasks were waiting, and if there were any other decompression tasks taking a non-trivial amount of time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Building macOS llvm for toolchains_llvm</title>
      <link>https://steven.casagrande.io/posts/2024/building-macos-llvm-package/</link>
      <pubDate>Sun, 22 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://steven.casagrande.io/posts/2024/building-macos-llvm-package/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/bazel-contrib/toolchains_llvm&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;toolchains_llvm&lt;/a&gt; is a great &lt;a href=&#34;https://bazel.build/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bazel&lt;/a&gt; ruleset for providing a hermetic llvm C / C++ (CC) toolchain.&lt;/p&gt;&#xA;&lt;p&gt;By default, this ruleset will download &lt;a href=&#34;https://github.com/llvm/llvm-project/releases&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;official llvm release packages&lt;/a&gt;. This is a good starting point, but you may want to build your own. Some reasons include:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Not wanting to rely on GitHub hosted artifacts&lt;/li&gt;&#xA;&lt;li&gt;Wanting to take ownership over your CC toolchain&lt;/li&gt;&#xA;&lt;li&gt;Downloading and extracting these large official releases is significantly impacting your CI startup time&lt;/li&gt;&#xA;&lt;li&gt;You want to use a version that doesn&amp;rsquo;t have official releases for your platforms&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;By the end of this article you will be able to build your own macOS llvm package with libc++ for use with toolchains_llvm. In addition to native macOS builds, this toolchain will be able to cross-compile for both Linux-x86_64 and Linux-aarch64 &lt;a href=&#34;https://steven.casagrande.io/posts/2024/sysroot-generation-toolchains-llvm/&#34; &gt;with an appropriate Linux sysroot package&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sysroot package generation for use with toolchains_llvm</title>
      <link>https://steven.casagrande.io/posts/2024/sysroot-generation-toolchains-llvm/</link>
      <pubDate>Sat, 23 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://steven.casagrande.io/posts/2024/sysroot-generation-toolchains-llvm/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://bazel.build/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bazel&lt;/a&gt; aims to provide a hermetic environment for your build &amp;amp; test operations (&amp;ldquo;actions&amp;rdquo;) to run in. However by default Bazel does not provide a hermetic C / C++ (CC) toolchain. If you would like to learn more about this and why it is important, then I suggest you read &lt;a href=&#34;https://blog.aspect.dev/hermetic-c-toolchain&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this article by Thulio Ferraz Assis at Aspect&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Alongside their article, &lt;a href=&#34;https://github.com/f0rmiga/gcc-toolchain&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;they developed a solution&lt;/a&gt; to enable a hermetic GCC compiler and associated Linux sysroot package. Their solution is great if you want to use GCC. But if you instead want to use a hermetic &lt;code&gt;llvm-clang&lt;/code&gt; compiler toolchain, then we are going to have to make some modifications.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Steven Casagrande - blog</title><link href="https://steven.casagrande.io/" rel="alternate"></link><link href="https://steven.casagrande.io/feeds/blog.atom.xml" rel="self"></link><id>https://steven.casagrande.io/</id><updated>2017-06-15T00:00:00-04:00</updated><subtitle>Lead build systems developer for IBM Quantum</subtitle><entry><title>My Personal Security Plan</title><link href="https://steven.casagrande.io/articles/my-personal-security-plan" rel="alternate"></link><published>2017-06-15T00:00:00-04:00</published><updated>2017-06-15T00:00:00-04:00</updated><author><name>Steven Casagrande</name></author><id>tag:steven.casagrande.io,2017-06-15:/articles/my-personal-security-plan</id><summary type="html">&lt;p&gt;Back on June 5, 2013 I remember pacing back and forth while freaking out all day. I spent the day talking to my good friend &lt;a class="reference external" href="http://www.cgranade.com/"&gt;Cassandra Granade&lt;/a&gt;, who was in a similar state of dismay. At the time we were both in graduate school, she doing her PhD and myself …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Back on June 5, 2013 I remember pacing back and forth while freaking out all day. I spent the day talking to my good friend &lt;a class="reference external" href="http://www.cgranade.com/"&gt;Cassandra Granade&lt;/a&gt;, who was in a similar state of dismay. At the time we were both in graduate school, she doing her PhD and myself working on my MSc, both in physics. We poured over all the news of the day, astonished at what we were reading. It honestly felt like some sort of nightmare, where all of the bad plots to Hollywood movies were coming real.&lt;/p&gt;
&lt;p&gt;Of course, this was the day that The Guardian, thanks to the courageous work of Edward Snowden, let the world know that the NSA was operating a variety of programs with the intent of mass surveillance of anyone and everyone. We learned of programs like PRISM and XKeyscore, of the secret courts compelling tech companies to do their bidding, and the widespread infiltration of every level of our modern networked lives.&lt;/p&gt;
&lt;p&gt;Needless to say, we didn't get any work done that day. And that day turned out to only be the tip of the iceberg.&lt;/p&gt;
&lt;p&gt;With all this information I became overwhelmed. As the days went on, more news kept coming out, and I just felt helpless.&lt;/p&gt;
&lt;p&gt;I write this now 4 years later. Since then, people much smarter than me have actually tried to do something about this. The fantastic people at the EFF and Open Whisper Systems have continued to put out free open-source software and text guides to help people protect their privacy and digital security. Over the last few months I've been thinking about this more, and now with the most recent &lt;a class="reference external" href="https://wikileaks.org/ciav7p1/"&gt;release by Wikileaks regarding the CIA&lt;/a&gt;, I've been doing my research to figure out what I can do to help myself. In this article, I will present in no particular order a list of things that I plan on doing now and in the near future.&lt;/p&gt;
&lt;div class="section" id="request-my-contacts-move-to-using-signal"&gt;
&lt;h2&gt;Request my contacts move to using Signal&lt;/h2&gt;
&lt;p&gt;Several years ago I installed the end-to-end encryption communications software, Signal. The problem I experienced was exactly what you might expect; the inertia involved with getting people to switch messaging systems proved difficult. It wasn't until Nov 25, 2015 on my birthday that I received a message on Signal from a friend who I had not previously discussed Signal with. How exciting! This continued to pickup throughout 2016 with more friends moving to the platform, mostly thanks to a few of them pushing for people to switch.&lt;/p&gt;
&lt;p&gt;Now its my turn. A lot of people that I communicate with are now on Signal, which is fantastic. The remainders though, are from different circles of friends. Here are the groups I've identified:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Family. Not sure if I'll be able to win this one, but its worth trying.&lt;/li&gt;
&lt;li&gt;Old friends. This shouldn't be too much of an issue. We just primarily use SMS because that's what we've always used.&lt;/li&gt;
&lt;li&gt;Warcraft guildmates. My guess is this will be half easy and half a pain. Some people will do it, some won't care, and some I'll need to hold their hand through the process.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="review-permissions-and-settings-for-all-apps-on-my-phone"&gt;
&lt;h2&gt;Review permissions and settings for all apps on my phone&lt;/h2&gt;
&lt;p&gt;This is something that I try to do on a regular basis, but I need to take the time to do a once-over for everything. This includes general app settings as well as Android permissions.&lt;/p&gt;
&lt;p&gt;The main prompt for this was my recent discovery that Google, through my cell phone, has been keeping a record of every single location I had gone since my first Android phone! I had honestly thought I had turned that off, but it turns out that was a different-but-similar tracking feature. I turned it off and purged the complete history, but it does make me wonder what else I've missed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="enable-full-disk-encryption-on-my-phone"&gt;
&lt;h2&gt;Enable full disk encryption on my phone&lt;/h2&gt;
&lt;p&gt;Here's a easy one. I need to enable fill disk encryption on my cell phone and switch to using a strong unlock passcode. I'm not going to lie, I should have done this ages ago, but I was lazy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="update-my-laptop-os"&gt;
&lt;h2&gt;Update my laptop OS&lt;/h2&gt;
&lt;p&gt;You would think that I'd always be on the latest and greatest OS version. But nope, not the case. I'm currently running Ubuntu GNOME 15.10 on my Thinkpad T440. This stopped being supported months ago, but I'm always hesitant to update my distribution instead of doing a clean install. I need to make sure I'm using supported software to help protect myself from security vulnerabilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="continue-to-pair-down-on-non-foss"&gt;
&lt;h2&gt;Continue to pair down on Non-FOSS&lt;/h2&gt;
&lt;p&gt;I've always been an advocate for Free Open Source Software (FOSS). I do my best to release my own projects under FOSS licences, and I try to encourage others to use FOSS solutions when they can. There are a few areas in my own life where I could do a little better. The one that sticks out in my head the most is Adobe Lightroom vs Darktable.&lt;/p&gt;
&lt;p&gt;I should also re-evaluate my usage of web-based software, and attempt to use more open alternatives where I can. I'll first have to take a better stock of my commonly used webapps and see where I can go from there.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="switch-back-to-using-firefox"&gt;
&lt;h2&gt;Switch back to using Firefox&lt;/h2&gt;
&lt;p&gt;I'm not sure exactly when it happened, but at some point I went from a happy Firefox user of many years, to primarily a Chrome user. My guess is the convenience of being able to log into my Google account directly into the browser proved to be too tempting.&lt;/p&gt;
&lt;p&gt;While a significant portion of &lt;a class="reference external" href="https://www.chromium.org/"&gt;Chrome is open source&lt;/a&gt;, I believe that at the end of the day, the &lt;a class="reference external" href="https://www.mozilla.org"&gt;Mozilla Foundation&lt;/a&gt; is a greater force for good in the FOSS community. At the end of the day, they make a great product, and ensuring that there is a counter to Google's corporate interests is important for all of us.&lt;/p&gt;
&lt;p&gt;My main concern with switching to Firefox is how poorly the browser has performed in exploit competitions. I even recall how Firefox was excluded from some due to how easy it was to exploit. Perhaps I first need to do some research and see how far Firefox has come in this department. Maybe I actually should be switching to the &lt;a class="reference external" href="https://github.com/Eloston/ungoogled-chromium"&gt;ungoogled-chromium project&lt;/a&gt;. Time will tell!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="set-default-search-to-duckduckgo"&gt;
&lt;h2&gt;Set Default search to Duckduckgo&lt;/h2&gt;
&lt;p&gt;This will probably be the hardest habit to break. I've been instinctively going to google.com for my web search needs for a very long time. I honestly can't remember what I used before. I recall using a variety of search engines in those early days. Unfortunately these days, everything you do online (and in a growing number of cases, in meatspace) is tracked and tied to a growing profile of you.&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category><category term="security"></category><category term="privacy"></category><category term="android"></category><category term="signal"></category><category term="linux"></category></entry><entry><title>Python, Requests, and SSL</title><link href="https://steven.casagrande.io/articles/python-requests-and-ssl" rel="alternate"></link><published>2016-06-20T00:00:00-04:00</published><updated>2016-06-20T00:00:00-04:00</updated><author><name>Steven Casagrande</name></author><id>tag:steven.casagrande.io,2016-06-20:/articles/python-requests-and-ssl</id><summary type="html">&lt;div class="section" id="ssl-and-synchronous-requests"&gt;
&lt;h2&gt;SSL and Synchronous Requests&lt;/h2&gt;
&lt;p&gt;(scroll down for async requests)&lt;/p&gt;
&lt;p&gt;In Python, the main way in which one makes a web request is via the &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; library, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://google.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where in this example Google's website is the route that you are interested in …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="ssl-and-synchronous-requests"&gt;
&lt;h2&gt;SSL and Synchronous Requests&lt;/h2&gt;
&lt;p&gt;(scroll down for async requests)&lt;/p&gt;
&lt;p&gt;In Python, the main way in which one makes a web request is via the &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; library, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://google.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where in this example Google's website is the route that you are interested in. Typically this would be some API route that returns JSON-encoded data.&lt;/p&gt;
&lt;p&gt;Alright, so lets say you're building something for work, and you'd like to hit an internal-API which only accepts connections over HTTPS. Your first approach might be something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://internalsite/api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But this is going to return a Stacktrace with this exception:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exceptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSLError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Errno&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;_ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;503&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;14090086&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;SSL&lt;/span&gt; &lt;span class="n"&gt;routines&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;SSL3_GET_SERVER_CERTIFICATE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;certificate&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt; &lt;span class="n"&gt;failed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what can we do here? Well, the easiest is just to disable SSL verfication:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://internalsite/api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But then you'll have to look at SSL disabled warnings every time you make a query, and who wants that?&lt;/p&gt;
&lt;p&gt;Instead what we want to do is specify our certificate bundle file location where we've included our certificates for the internal sites we would like to access. There are a few ways to do this with the &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; package.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Define the environment variable &lt;tt class="docutils literal"&gt;REQUESTS_CA_BUNDLE&lt;/tt&gt; which points to your certificate bundle file. For example: &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/ssl/certs/ca-certificates.crt&lt;/span&gt;&lt;/tt&gt;. When this variable has been defined, &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; will use it as the default for all connections, and so you don't need to modify any of your code.&lt;/li&gt;
&lt;li&gt;Fork package &lt;a class="reference external" href="https://github.com/certifi/python-certifi"&gt;certifi&lt;/a&gt;,  add your internal root-CA certificate to this, and then install with &lt;tt class="docutils literal"&gt;python setup.py install&lt;/tt&gt;. When &lt;tt class="docutils literal"&gt;certifi&lt;/tt&gt; is present, &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; will default to using it has the root-CA authority and will do SSL-verification against the certificates found there.&lt;/li&gt;
&lt;li&gt;Modify your code to point to the certificate bundle file like so:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://internalsite/api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc/ssl/certs/ca-certificates.crt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ssl-and-asynchronous-requests"&gt;
&lt;h2&gt;SSL and Asynchronous Requests&lt;/h2&gt;
&lt;p&gt;So things are a little bit different with async requests under &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;aiohttp&lt;/tt&gt;. Instead what we have to do here is create an SSL context with the &lt;tt class="docutils literal"&gt;ssl&lt;/tt&gt; standard library, and pass that into the appropriate objects from &lt;tt class="docutils literal"&gt;aiohttp&lt;/tt&gt;. Here is an example of this in action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;aiohttp&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ssl&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# The URLs and headers (blank in this demo) that will be requested async&lt;/span&gt;
    &lt;span class="n"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://internalsite/api/1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://internalsite/api/2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="c1"&gt;# Create out SSL context object with our CA cert file&lt;/span&gt;
    &lt;span class="n"&gt;sslcontext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_default_context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cafile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/etc/ssl/certs/ca-certificates.crt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Pass this SSL context to aiohttp and create a TCPConnector&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TCPConnector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ssl_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sslcontext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Using this TCPConnector, open a session&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;aiohttp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ClientSession&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# This is the asyncio part&lt;/span&gt;
        &lt;span class="c1"&gt;# Create a list of futures&lt;/span&gt;
        &lt;span class="n"&gt;futures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;fetch_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;# Then wait for the futures to all complete&lt;/span&gt;
        &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;futures&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="c1"&gt;# Extract the resulting data&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Sidenote: I noticed in some of the discussion on the &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; Github page that they would like the ability to take SSL context objects similar to &lt;tt class="docutils literal"&gt;aiohttp&lt;/tt&gt; (as shown above) and the standard library &lt;tt class="docutils literal"&gt;urllib&lt;/tt&gt;)&lt;/p&gt;
&lt;p&gt;And that's what you need to do to get your SSL authentication all squared away!&lt;/p&gt;
&lt;/div&gt;
</content><category term="blog"></category><category term="python"></category><category term="requests"></category><category term="ssl"></category><category term="aynscio"></category><category term="aiohttp"></category></entry><entry><title>Travis CI and If Statements</title><link href="https://steven.casagrande.io/articles/travis-ci-and-if-statements" rel="alternate"></link><published>2016-04-28T00:00:00-04:00</published><updated>2016-04-28T00:00:00-04:00</updated><author><name>Steven Casagrande</name></author><id>tag:steven.casagrande.io,2016-04-28:/articles/travis-ci-and-if-statements</id><summary type="html">&lt;p&gt;So the other day at work (seems to be a trend in my posts) I was investigating a problem that we noticed with one of our project's TravisCI builds. Specifically, we found that a step under &lt;code&gt;script&lt;/code&gt; had failed, but the overall build still passed! Very curious problem indeed, and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So the other day at work (seems to be a trend in my posts) I was investigating a problem that we noticed with one of our project's TravisCI builds. Specifically, we found that a step under &lt;code&gt;script&lt;/code&gt; had failed, but the overall build still passed! Very curious problem indeed, and of course needs to be immediately fixed.&lt;/p&gt;
&lt;p&gt;Let's take a look at a similar offending code block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#39;if&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;[&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;${TRAVIS_SECURE_ENV_VARS}&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;=&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;];&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="s"&gt;docker&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;project-container&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;npm&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;test&amp;quot;;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="s"&gt;docker&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;project-container&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;npm&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;test:lint&amp;quot;;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="s"&gt;docker-compose&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ui-tests;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="s"&gt;npm&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;test;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="s"&gt;npm&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;run&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;test:lint;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s"&gt;fi&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Before we continue, I'd like to point out that I did not write this &lt;code&gt;if&lt;/code&gt; block. In fact, here is what I had just weeks before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker run project-container &amp;quot;npm run test&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker run project-container &amp;quot;npm run test:lint&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;docker-compose run ui-tests&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, because people wanted to be able to work in forks on Github, decisions were made to disable tests to accommodate the workflow. That's another topic for another day. The important part for this story is that the Travis configuration file was changed to accommodate this.&lt;/p&gt;
&lt;p&gt;What I noticed was that an error was being generated during the &lt;code&gt;docker run project-container &amp;quot;npm run test&amp;quot;&lt;/code&gt; step. This is a big problem; the build should be flagged as a failure if this happens!&lt;/p&gt;
&lt;p&gt;So I stopped to think for a bit. Travis is clearly checking for non-zero exit codes to determine when to fail or error a build. But the question is, when does this check occur, and why was it working just fine before the &lt;code&gt;if&lt;/code&gt; statement was introduced? Well then it hit me. The &lt;code&gt;if&lt;/code&gt; block is executed entirely as one command, and the exit code is checked after it is finished.&lt;/p&gt;
&lt;p&gt;With this in mind, I did some quick experimenting. I made two files, each simply with either &lt;code&gt;exit 0;&lt;/code&gt; or &lt;code&gt;exit 1;&lt;/code&gt; to simulate commands that either pass or fail. Then, I ran the following in my terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;./fail.sh&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;./pass.sh&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$?&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where &lt;code&gt;$?&lt;/code&gt; is the exit code of the last run command. It printed out a &lt;code&gt;0&lt;/code&gt;! Ah ha! This is what Travis will see, and so the build passes.&lt;/p&gt;
&lt;p&gt;So there are two main solutions here. We need to make sure that Travis knows to fail the build when something goes wrong. Either your &lt;code&gt;if&lt;/code&gt; block needs to be in its own file with &lt;code&gt;set -ev&lt;/code&gt; at the top (to stop the script when an error occurs), like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt; 1&lt;/span&gt;
&lt;span class="normal"&gt; 2&lt;/span&gt;
&lt;span class="normal"&gt; 3&lt;/span&gt;
&lt;span class="normal"&gt; 4&lt;/span&gt;
&lt;span class="normal"&gt; 5&lt;/span&gt;
&lt;span class="normal"&gt; 6&lt;/span&gt;
&lt;span class="normal"&gt; 7&lt;/span&gt;
&lt;span class="normal"&gt; 8&lt;/span&gt;
&lt;span class="normal"&gt; 9&lt;/span&gt;
&lt;span class="normal"&gt;10&lt;/span&gt;
&lt;span class="normal"&gt;11&lt;/span&gt;
&lt;span class="normal"&gt;12&lt;/span&gt;
&lt;span class="normal"&gt;13&lt;/span&gt;
&lt;span class="normal"&gt;14&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-ev

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TRAVIS_SECURE_ENV_VARS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;project-container&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;npm run test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;project-container&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;npm run test:lint&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;docker-compose&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;ui-tests&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;test&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;test:lint&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;Or, you can directly call the command to terminate the Travis job by changing the block in your &lt;code&gt;.travis.yml&lt;/code&gt; file like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="normal"&gt;1&lt;/span&gt;
&lt;span class="normal"&gt;2&lt;/span&gt;
&lt;span class="normal"&gt;3&lt;/span&gt;
&lt;span class="normal"&gt;4&lt;/span&gt;
&lt;span class="normal"&gt;5&lt;/span&gt;
&lt;span class="normal"&gt;6&lt;/span&gt;
&lt;span class="normal"&gt;7&lt;/span&gt;
&lt;span class="normal"&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TRAVIS_SECURE_ENV_VARS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;project-container&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;npm run test&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;travis_terminate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;project-container&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;npm run test:lint&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;travis_terminate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;docker-compose&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;ui-tests&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;travis_terminate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;travis_terminate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;npm&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;test:lint&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;travis_terminate&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;p&gt;So the moral of the story is, don't put &lt;code&gt;if&lt;/code&gt; statements in your &lt;code&gt;.travis.yml&lt;/code&gt; file if you care about the exit status.&lt;/p&gt;
</content><category term="blog"></category><category term="travis"></category><category term="bash"></category></entry><entry><title>Remember to Pull Your Base Docker Images Before Building</title><link href="https://steven.casagrande.io/articles/remember-to-pull-your-base-docker-images-before-building" rel="alternate"></link><published>2016-04-22T00:00:00-04:00</published><updated>2016-04-22T00:00:00-04:00</updated><author><name>Steven Casagrande</name></author><id>tag:steven.casagrande.io,2016-04-22:/articles/remember-to-pull-your-base-docker-images-before-building</id><summary type="html">&lt;p&gt;At work I was recently debugging some docker containers that were being built nightly by Jenkins. These were actually the same images that I was building &lt;a class="reference external" href="https://steven.casagrande.io/articles/automatically-building-docker-containers-with-different-base-image-tags"&gt;in my last article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After making the changes that I mentioned in that article, I noticed that the resulting containers for &lt;tt class="docutils literal"&gt;argon&lt;/tt&gt; were having …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At work I was recently debugging some docker containers that were being built nightly by Jenkins. These were actually the same images that I was building &lt;a class="reference external" href="https://steven.casagrande.io/articles/automatically-building-docker-containers-with-different-base-image-tags"&gt;in my last article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After making the changes that I mentioned in that article, I noticed that the resulting containers for &lt;tt class="docutils literal"&gt;argon&lt;/tt&gt; were having no issues, but builds of our app using &lt;tt class="docutils literal"&gt;latest&lt;/tt&gt; were having issues finding a package. So I built our app container locally and I dived in to see what was wrong.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--rm&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;--entrypoint&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;container-name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This let me get a prompt inside the container to take a look at what the problem was. First I looked inside the &lt;tt class="docutils literal"&gt;node_modules&lt;/tt&gt; folder to see if the package was messed up. What I instead noticed was that the container was missing a bunch of our dependencies! Then I got suspicious...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;# &lt;/span&gt;node&lt;span class="w"&gt; &lt;/span&gt;--version
&lt;span class="go"&gt;4.1.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What the fuck. This should be 5.10.1&lt;/p&gt;
&lt;p&gt;So I retriggered the Jenkins job, blew everything away locally and repulled the &lt;tt class="docutils literal"&gt;baseimage:latest&lt;/tt&gt; that Jenkins just built.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;run&lt;span class="w"&gt; &lt;/span&gt;--rm&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;--entrypoint&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/bin/bash&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;baseimage:latest

&lt;span class="gp"&gt;# &lt;/span&gt;node&lt;span class="w"&gt; &lt;/span&gt;--version
&lt;span class="go"&gt;4.1.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;FUCK&lt;/p&gt;
&lt;p&gt;So I check the Jenkins build log. Yes, it correctly spits out &lt;code&gt;FROM node:latest&lt;/code&gt; when building the image. It pushes everything correctly. No errors, no typos.&lt;/p&gt;
&lt;p&gt;So I explicitly compare what I was running before in the Dockerfile to what I was running now. Before it was actually this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;node:5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now its:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;node:latest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Currently those point to the same image on Docker hub. It was at this point though that I realised what was going on. At some point months ago someone on this Jenkins box did a &lt;code&gt;docker pull node&lt;/code&gt;. Then at build time, when docker read the &lt;code&gt;FROM node:latest&lt;/code&gt; line, it would check locally, see the image, and just use that.&lt;/p&gt;
&lt;p&gt;This wasn't a problem before because &lt;code&gt;FROM node:5&lt;/code&gt; would look locally, but not see anything tagged &lt;code&gt;node:5&lt;/code&gt;. It would then pull it from Docker Hub, but not save the tag on the server! Thus every time it ran it would repull the latest 5 release container.&lt;/p&gt;
&lt;p&gt;So the solution? Be explicit in what your project needs in your automated builds. Pull your base images before attempting to use them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;TAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;latest:argon&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tag&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TAGS&lt;/span&gt;&lt;span class="p"&gt;//:/ &lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s/TAG/&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Dockerfile-template&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;Dockerfile
&lt;span class="w"&gt;    &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;pull&lt;span class="w"&gt; &lt;/span&gt;node:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;--no-cache&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;container-name:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.
&lt;span class="w"&gt;    &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;container-name:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;rmi&lt;span class="w"&gt; &lt;/span&gt;container-name:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="blog"></category><category term="docker"></category><category term="jenkins"></category></entry><entry><title>Automatically Building Docker Containers With Different Base Image Tags</title><link href="https://steven.casagrande.io/articles/automatically-building-docker-containers-with-different-base-image-tags" rel="alternate"></link><published>2016-04-20T00:00:00-04:00</published><updated>2016-04-20T00:00:00-04:00</updated><author><name>Steven Casagrande</name></author><id>tag:steven.casagrande.io,2016-04-20:/articles/automatically-building-docker-containers-with-different-base-image-tags</id><summary type="html">&lt;p&gt;At work I recently added a Dockerfile to one of our accessory tools, and set it up with Jenkins to build on a nightly basis. This build occurs nightly as opposed to on new master commits to ensure that the resulting container always has the latest versions of all its …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At work I recently added a Dockerfile to one of our accessory tools, and set it up with Jenkins to build on a nightly basis. This build occurs nightly as opposed to on new master commits to ensure that the resulting container always has the latest versions of all its dependencies (including node).&lt;/p&gt;
&lt;p&gt;I wrote the Dockerfile such that we were building off of the &lt;a class="reference external" href="https://hub.docker.com/_/node"&gt;official node containers&lt;/a&gt;. Specifically, off of the latest tag. Here is what I mean:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;node:latest&lt;/span&gt;

&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;some-stuff
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This would ensure that I was always using the latest node version every night, which is exactly what I wanted. Perfect!&lt;/p&gt;
&lt;p&gt;A few weeks later as news of the container made its way around the devs, I was asked to provide a build of the tool that uses the latest LTS node release instead of the latest-latest release. I should be able to do that, no problem. On Docker Hub there is a node tag named &lt;tt class="docutils literal"&gt;argon&lt;/tt&gt;, which corresponds to the latest build of the current LTS branch (currently node 4.4.3). So my challenge was to provide two identical containers with only the node version changed between them.&lt;/p&gt;
&lt;p&gt;I first considered using the Docker &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;--build-arg&lt;/span&gt;&lt;/tt&gt; flag with a corresponding &lt;tt class="docutils literal"&gt;ARG&lt;/tt&gt; line in the Dockerfile. Typically this is used in the following way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;ubuntu&lt;/span&gt;

&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;myvar

&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;apt-get&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;myvar&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then built like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;--build-arg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;myvar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;value&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;container-name&lt;span class="w"&gt; &lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But of course, I wanted to use this build argument in the &lt;tt class="docutils literal"&gt;FROM&lt;/tt&gt; line. So first I tried this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ARG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tag

&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;node:${tag}&lt;/span&gt;

&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;some-stuff
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But that isn't going to work. The first line in every Dockerfile must be a &lt;tt class="docutils literal"&gt;FROM&lt;/tt&gt; statement.&lt;/p&gt;
&lt;p&gt;What I instead decided to do (and settled on) was to instead use a file I named &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Dockerfile-template&lt;/span&gt;&lt;/tt&gt;, and then use the unix tool &lt;tt class="docutils literal"&gt;sed&lt;/tt&gt; to generate the actual Dockerfile one at a time. Here is what that looked like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;node:TAG&lt;/span&gt;

&lt;span class="k"&gt;RUN&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;some-stuff
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the scrubbed bash script that was run by Jenkins:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;TAGS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;latest:argon&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tag&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tags&lt;/span&gt;&lt;span class="p"&gt;//:/ &lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;sed&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s/TAG/&amp;#39;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;Dockerfile-template&lt;span class="w"&gt; &lt;/span&gt;&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;Dockerfile
&lt;span class="w"&gt;    &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;build&lt;span class="w"&gt; &lt;/span&gt;--no-cache&lt;span class="w"&gt; &lt;/span&gt;-t&lt;span class="w"&gt; &lt;/span&gt;container-name:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;.
&lt;span class="w"&gt;    &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;container-name:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;docker&lt;span class="w"&gt; &lt;/span&gt;rmi&lt;span class="w"&gt; &lt;/span&gt;container-name:&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;tag&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So now I'm providing nightly rebuilds of the internal tool, one with tag &lt;tt class="docutils literal"&gt;latest&lt;/tt&gt; and one with tag &lt;tt class="docutils literal"&gt;argon&lt;/tt&gt;, each corresponding to what version of node it was built with!&lt;/p&gt;
</content><category term="blog"></category><category term="docker"></category><category term="jenkins"></category><category term="bash"></category></entry><entry><title>Code Coverage Isn't Everything</title><link href="https://steven.casagrande.io/articles/code-coverage-isnt-everything" rel="alternate"></link><published>2016-04-16T00:00:00-04:00</published><updated>2016-04-16T00:00:00-04:00</updated><author><name>Steven Casagrande</name></author><id>tag:steven.casagrande.io,2016-04-16:/articles/code-coverage-isnt-everything</id><summary type="html">&lt;p&gt;Over the past few months, the people within my circle of friends (myself included) have started to put more of an emphasis on increasing the code coverage for their own projects. I'd like to take a moment here how a code coverage metric is important, but it should not be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the past few months, the people within my circle of friends (myself included) have started to put more of an emphasis on increasing the code coverage for their own projects. I'd like to take a moment here how a code coverage metric is important, but it should not be the only goal when writing unit tests.&lt;/p&gt;
&lt;p&gt;For those that are unaware, code coverage is simply a metric that measures the percentage of lines of code that are executed when your unit test framework is run. You can see an example coverage report at the &lt;a class="reference external" href="https://coveralls.io/github/Galvant/InstrumentKit"&gt;Coveralls page for InstrumentKit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Coverage is a great indicator that you are heading in the correct direction with your tests. After all, if a line of code is ran once in a test environment, that's better than zero! The problem arises when one assumes that is sufficient. The idea is that unit tests should capture all the behaviour of your code, not just touch each line once.&lt;/p&gt;
&lt;p&gt;Alright, lets look at an example of what I'm talking about. A great example is a function that uses ternary expressions (basic &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statements compressed into a single line).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All this function is doing is casting the input to lowercase if the input is a string, else it just returns the input. Not the most useful function in the world, but a good demonstration.&lt;/p&gt;
&lt;p&gt;Now lets say our corresponding tests look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_foobar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So now if we were to check our code coverage, we'd see that we have 100%! Wow great job! But wait...we haven't actually captured all the behaviour. Someone in the future could change our &lt;tt class="docutils literal"&gt;foobar&lt;/tt&gt; function to call &lt;tt class="docutils literal"&gt;str.upper()&lt;/tt&gt;, or not do anything with strings at all. We need some more tests.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_foobar_integer&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_foobar_lower_case_string&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_foobar_casts_to_lower&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AbCd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;abcd&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There we go, much better. Even though our code coverage hasn't changed, our tests are in a much better shape. Naturally we can keep adding more (whats the desired behaviour with lists of strings? What about byte strings?) but to show my point this is sufficient.&lt;/p&gt;
&lt;p&gt;Now, this would have been much less of a problem if we had followed Test Driven Development (basically write tests before you write your implementation, yand es this is a huge oversimplification of TDD). But because we're trying to add tests to an existing project after its already been written, we don't get that privilege.&lt;/p&gt;
</content><category term="blog"></category><category term="testing"></category></entry><entry><title>Compiling Arduino Caterina with New VID/PID</title><link href="https://steven.casagrande.io/articles/compiling-arduino-caterina-with-new-vidpid" rel="alternate"></link><published>2014-02-19T00:00:00-05:00</published><updated>2014-02-19T00:00:00-05:00</updated><author><name>Steven Casagrande</name></author><id>tag:steven.casagrande.io,2014-02-19:/articles/compiling-arduino-caterina-with-new-vidpid</id><summary type="html">&lt;p&gt;Compiling the Arduino Leonardo bootloader (aka Caterina) is a required step in making your own Arduino Leonardo-compatible board available to others. This blog post will go over what you need to do in order to make your derivative board valid for sale.&lt;/p&gt;
&lt;p&gt;As opposed to previous Arduinos, the Leonardo uses …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Compiling the Arduino Leonardo bootloader (aka Caterina) is a required step in making your own Arduino Leonardo-compatible board available to others. This blog post will go over what you need to do in order to make your derivative board valid for sale.&lt;/p&gt;
&lt;p&gt;As opposed to previous Arduinos, the Leonardo uses the built-in USB of the atmega32u4 rather than a discrete USB-to-serial IC. All USB devices have two identification numbers: a vendor ID (VID) and a product ID (PID). Each organization that produces USB devices pays the USB-IF for a VID, giving them the ability to self-issue PIDs. Although the Arduino is open source hardware, this does not include the rights to use their VID in derivative products. You must obtain your own VID/PID pair and recompile the bootloader. In fact, you actually will need two PIDs for this project, one for the bootloader and one for the running sketch.&lt;/p&gt;
&lt;p&gt;How you obtain your VID/PID pairs is beyond the scope of this article. I will offer one suggestion. If you release your project as open source, you can ask the folks at the Openmoko project to be issues a PID with their VID. You can see more details about that here: &lt;a href="http://wiki.openmoko.org/wiki/USB_Product_IDs"&gt;http://wiki.openmoko.org/wiki/USB_Product_IDs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With your two VID/PID pairs in hand, lets compile the bootloader. I am going to be making the assumption that this is taking place on a Linux machine. The steps themselves will be very similar for compiling on a Windows machine, but require a few extra steps to get the path variables all setup. Honestly its a pain in the arse and I hate doing development work on Windows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Make sure the Arduino IDE is installed. This ensures you have all the required tools as well as the source code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Download LUFA-111009 and unpack it in the same directory as your caterina folder. By default on ubuntu, this will be &lt;code&gt;/usr/share/arduino/hardware/arduino/bootloaders&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; This step is optional. Open &lt;code&gt;Descriptors.c&lt;/code&gt; located at &lt;code&gt;/usr/share/arduino/hardware/arduino/bootloaders/caterina/Descriptors.c&lt;/code&gt; . Navigate down to line 192 (&lt;code&gt;const USB_Descriptor_String_t ProductString&lt;/code&gt;). Here you can add a product ID string for your PID. For example, I added:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#elif DEVICE_PID == 0x609C&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnicodeString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sa"&gt;L&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Galvant antiAFk &amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Directly below the Arduino Esplora entry. Notice line 194 which specifies a string length of 16 characters. If you entry is less, add some spaces on the end (as done with the Arduino Micro). If it is more, you will need to increase this value in one of two ways. Either increase it here at this line and add spaces to pad out all the existing Arduino strings, or move this line within the #if #endif block. Do the same for the VID entries directly below. Here is the entire block for the VID copied from my file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;USB_Descriptor_String_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ManufNameString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#if DEVICE_VID == 0x2341&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;USB_STRING_LEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DTYPE_String&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnicodeString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sa"&gt;L&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Arduino LLC&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#elif DEVICE_VID == 0x1D50&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;USB_STRING_LEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DTYPE_String&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnicodeString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sa"&gt;L&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Galvant Industries&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Header&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{.&lt;/span&gt;&lt;span class="n"&gt;Size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;USB_STRING_LEN&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DTYPE_String&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnicodeString&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sa"&gt;L&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Unknown &amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Open the Makefile (&lt;code&gt;/usr/share/arduion/hardware/arduino/bootloaders/caterina/Makefile&lt;/code&gt;) and look for the variable called “LUFA_PATH”. This should be around line 130. Modify this line to point to the folder LUFA-111009 that you extracted. If you have been following my instructions, this line should read &lt;code&gt;&amp;lt;code&amp;gt;LUFA_PATH = ../LUFA-111009&amp;lt;/code&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; At the beginning of the Makefile after the file header is where the VID and PID are defined. Comment out any VID or PID currently specified and replace the entires with your VID and PID. The PID that you select here (out of your two) will be the one that is used for the bootloader. Mine looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;# USB vendor ID (VID)&lt;/span&gt;
&lt;span class="cp"&gt;# reuse of this VID by others is forbidden by USB-IF&lt;/span&gt;
&lt;span class="cp"&gt;# official Arduino LLC VID&lt;/span&gt;
&lt;span class="cp"&gt;# VID = 0x2341&lt;/span&gt;
&lt;span class="cp"&gt;# Openmoko VID&lt;/span&gt;
&lt;span class="n"&gt;VID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x1D50&lt;/span&gt;

&lt;span class="cp"&gt;# USB product ID (PID)&lt;/span&gt;
&lt;span class="cp"&gt;# official Leonardo PID&lt;/span&gt;
&lt;span class="cp"&gt;# PID = 0x0036&lt;/span&gt;
&lt;span class="cp"&gt;# official Micro PID&lt;/span&gt;
&lt;span class="cp"&gt;# PID = 0x0037&lt;/span&gt;
&lt;span class="cp"&gt;# official Esplora PID&lt;/span&gt;
&lt;span class="cp"&gt;# PID = 0x003C&lt;/span&gt;
&lt;span class="cp"&gt;# antiAFK PID&lt;/span&gt;
&lt;span class="n"&gt;PID&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;0x60A3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 6:&lt;/strong&gt; Open your terminal and change directory to &lt;code&gt;/usr/share/arduino/hardware/arduino/bootloaders/caterina&lt;/code&gt; and run make clean and make all. Depending on your account permissions this may have to be run as the super user. The compiled bootloader will be named &lt;code&gt;Caterina.hex&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 7:&lt;/strong&gt; Rename &lt;code&gt;Caterina.hex&lt;/code&gt; to something such as &lt;code&gt;Caterina-boardname.hex&lt;/code&gt; so that it is not overridden in the future.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 8:&lt;/strong&gt; Open &lt;code&gt;boards.txt&lt;/code&gt; (normally located at &lt;code&gt;/usr/share/arduino/hardware/arduino/boards.txt&lt;/code&gt;). Copy and paste the entry for the Leonardo to the bottom of the file. Replace the leonardo at the beginning of each line with the name of your board and modify the rest of the entries as required. The key ones are the name (what you want it to show up as in the Arduino IDE) and &lt;code&gt;bootloader.file&lt;/code&gt; (the name that you renamed &lt;code&gt;Caterina.hex&lt;/code&gt; to in step 7).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 9:&lt;/strong&gt; Still at &lt;code&gt;boards.txt&lt;/code&gt;, you want to change the &lt;code&gt;build.vid&lt;/code&gt; and &lt;code&gt;build.pid&lt;/code&gt; entries. For PID, you want to enter your OTHER PID, not the one you used in the earlier steps. This entry here is the VID/PID pair that will be used for the sketch which must be distinct from the bootloader PID. These changes to &lt;code&gt;boards.txt&lt;/code&gt; must be located on any computer that will upload a sketch to your board in order to use to correct sketch VID/PID pair. Here is my boards.txt entry:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;antiAFK.name=Galvant antiAFK
antiAFK.upload.protocol=avr109
antiAFK.upload.maximum_size=28672
antiAFK.upload.speed=57600
antiAFK.upload.disable_flushing=true
antiAFK.bootloader.low_fuses=0xff
antiAFK.bootloader.high_fuses=0xd8
antiAFK.bootloader.extended_fuses=0xcb
antiAFK.bootloader.path=caterina
antiAFK.bootloader.file=Caterina-antiAFK.hex
antiAFK.bootloader.unlock_bits=0x3F
antiAFK.bootloader.lock_bits=0x2F
antiAFK.build.mcu=atmega32u4
antiAFK.build.f_cpu=16000000L
antiAFK.build.vid=0x1D50
antiAFK.build.pid=0x609C
antiAFK.build.core=arduino
antiAFK.build.variant=leonardo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 10:&lt;/strong&gt; Burn the bootloader to your board! I just use my Arduino Uno and the Arduino IDE for this. To do the same, look up how to use the Uno as an ISP. Basically you upload the ArduinoISP example to your Uno, then select Tools-&amp;gt;Programmer-&amp;gt;Arduino as ISP, Tools-&amp;gt;Serial Port-&amp;gt;{your Uno}, Tools-&amp;gt;Board-&amp;gt;{which bootloader you want to burn}, then connect everything up and hit Tools-&amp;gt;Burn Bootloader.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 11:&lt;/strong&gt; If you are running Linux, connect your new board to your PC and start uploading sketches! Sadly if you are running Windows, there is still a few more steps. You see, Windows does USB differently than the others. Linux looks at the enumeration and checks for standard types. If it is non-standard, it will then look at the VID/PID and search for a matching kernel module. Windows goes straight to looking at the VID/PID. So even though your device is functionally equivalent to the Arduino Leonardo, Windows will refuse to let you use it without a dedicated driver. An example driver file can be found &lt;a href="https://github.com/Galvant/usb_drivers/blob/master/Galvant_USB_driver.inf"&gt;on GitHub&lt;/a&gt;. Scroll down to the section “Vendor and Product ID Definitions” at line 78. Here, modify the beginning of each entry with the name of your product. IE, replace &lt;code&gt;antiAFK.bootloader&lt;/code&gt; and &lt;code&gt;antiAFK.sketch&lt;/code&gt; with &lt;code&gt;yourproduct.bootloader&lt;/code&gt; and &lt;code&gt;yourproduct.sketch&lt;/code&gt;. On each line there are two references to the VID and PID. Make you you replace all instances of the VID and PID with yours. There are two entries per line, and two lines per bootloader and sketch (one for 32 and one for 64 bit). Make super sure you have replaced ALL INSTANCES OF VID&amp;amp;PID WITH YOUR VALUES. Windows likes to cache USB information, even if you delete the driver, in the registry and this can be a pain in the arse to remove. MAKE SURE YOU PUT THE CORRECT VID/PID PAIR FOR BOOTLOADER AND THE CORRECT ONE FOR SKETCH. At the bottom on the file are a bunch of strings. Replace them as you see fit. Specifically, make sure to replace &lt;code&gt;MFGNAME&lt;/code&gt; and &lt;code&gt;INSTDISK&lt;/code&gt;, while also replacing &lt;code&gt;antiAFK.bootloader&lt;/code&gt; and &lt;code&gt;antiAFK.sketch&lt;/code&gt; with your own products and their strings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 12:&lt;/strong&gt; On Windows, connect your device to your PC. Windows will complain about having no driver file. Go into the device manager (Start-&amp;gt;Control Panel-&amp;gt;Device Manager), right click on the device, update driver, and point it to the folder containing your INF file. Accept the dialog about the driver not being signed. Windows will then automatically use this file in the future for any USB devices with matching VID/PIDs pairs. You should now see in the device manager an entry for the bootloader. For my antiAFK, there would be an entry called “Galvant antiAFK Loader”. The first time you upload a sketch Windows will once again have to install the driver for the different sketch-PID. However, it will have your INF already stored and will do so automatically.&lt;/p&gt;
&lt;p&gt;And you’re done! It’s a lot of steps, but I hope it helps.&lt;/p&gt;</content><category term="blog"></category></entry></feed>